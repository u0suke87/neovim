[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
#  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
#    \ neosnippet#expandable_or_jumpable() ?
#    \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  call deoplete#custom#option({
    \ 'auto_complete_delay': 0,
    \ }) 
  call deoplete#custom#source(
    \ 'LanguageClient',
    \ 'min_pattern_lenght',
    \ 2) 
'''

#[[plugins]]
#repo = 'zchee/deoplete-clang'
#on_ft = 'cpp'
#depends = 'deoplete.nvim'
#hook_add = '''
#  let g:deoplete#sources#clang#libclang_path='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib'
#  let g:deoplete#sources#clang#clang_header='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang'
#'''

#[[plugins]]
#repo = 'Shougo/neoinclude.vim'
#on_ft = ['c', 'cpp']
#depends = 'deoplete.nvim'

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['cpp', 'go', 'python', 'ruby']
    # 以下、hook_addで設定している項目上から
    # シンボルカラムを表示したままにする
    # 保存時に整形してくれる
    # 補完してくれる
    # エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
    # 以下、key mapping
    # Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
hook_add = '''
    let g:ale_sign_column_always = 1
    let g:ale_fix_on_save = 1
    let g:ale_completion_enabled = 1
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
    # 隠しファイルを設定する
hook_add = '''
    let NERDTreeShowHidden = 1
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
  # 以下、hook_addで設定している項目上から
  # 保存時に必要なimportを自動的に挿入
  # LSPに任せる機能をOFFにする
hook_add = '''
  let g:go_fmt_command = 'goimports'
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
on_ft = ['go', 'cpp', 'python', 'ruby', 'java']
build = 'bash install.sh'
rev = 'next'
  # 以下、hook_add内から一時的に退避
  # nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  # nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  # 以下、hook_add内に追加で、正常動作しない際のlog確認
  # let g:LanguageClient_loggingFile = expand('~/.config/nvim/LanguageClient.log')
hook_add = '''
  set hidden
  noremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  let g:LanguageClient_autoStart = 1
  let g:LanguageClient_serverCommands = {
      \ 'go': ['gopls'],
      \ 'cpp': ['clangd'],
      \ 'python': ['pyls'],
      \ 'ruby': ['solargraph'],
      \ 'java': [
      \ 'java',
      \ '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044',
      \ '-Declipse.application=org.eclipse.jdt.ls.core.id1',
      \ '-Dosgi.bundles.defaultStartLevel=4',
      \ '-Declipse.product=org.eclipse.jdt.ls.core.product',
      \ '-Dlog.protocol=true',
      \ '-Dlog.level=ALL',
      \ '-noverify',
      \ '-Xmx1G',
      \ '-jar',
      \ expand('~/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.300.v20190213-1655.jar'),
      \ '-configuration',
      \ expand('~/lsp/eclipse.jdt.ls/config_mac'),
      \ '-data',
      \ getcwd()]
      \ }
  let g:LanguageClient_loadSettings = 1
  let g:LanguageClient_diagnosticsEnable = 0
'''
